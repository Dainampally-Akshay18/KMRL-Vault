import React, { useState, useEffect, useRef } from 'react'
import { createSession, uploadDocument } from '../services/api'
import './Home.css'

const Home = () => {
  const [sessionToken, setSessionToken] = useState('')
  const [text, setText] = useState('')
  const [file, setFile] = useState(null)
  const [loading, setLoading] = useState(false)
  const [result, setResult] = useState(null)
  const [error, setError] = useState('')
  const [uploadMode, setUploadMode] = useState('text')
  const [dragActive, setDragActive] = useState(false)
  const [uploadProgress, setUploadProgress] = useState(0)

  // New state for RAG analysis
  const [ragLoading, setRagLoading] = useState(false)
  const [ragError, setRagError] = useState('')
  const [ragResult, setRagResult] = useState(null)
  const [analysisType, setAnalysisType] = useState('risk_analysis')

  const fileInputRef = useRef(null)
  const dropZoneRef = useRef(null)

  const refreshSession = async () => {
    try {
      const response = await createSession()
      setSessionToken(response.session_token)
      localStorage.setItem('session_token', response.session_token)
      return response.session_token
    } catch (err) {
      setError('Failed to refresh session')
      throw err
    }
  }

  useEffect(() => {
    const initSession = async () => {
      try {
        const response = await createSession()
        setSessionToken(response.session_token)
        localStorage.setItem('session_token', response.session_token)
      } catch (err) {
        setError('Failed to create session')
      }
    }

    const existingToken = localStorage.getItem('session_token')
    if (existingToken) {
      setSessionToken(existingToken)
    } else {
      initSession()
    }
  }, [])

  const handleDrag = (e) => {
    e.preventDefault()
    e.stopPropagation()
    if (e.type === 'dragenter' || e.type === 'dragover') {
      setDragActive(true)
    } else if (e.type === 'dragleave') {
      setDragActive(false)
    }
  }

  const handleDrop = (e) => {
    e.preventDefault()
    e.stopPropagation()
    setDragActive(false)
    if (e.dataTransfer.files && e.dataTransfer.files[0]) {
      const droppedFile = e.dataTransfer.files[0]
      if (validateFileType(droppedFile)) {
        setFile(droppedFile)
        setError('')
        setResult(null)
        setUploadMode('file')
      } else {
        setError('Please upload a valid file type (.txt, .doc, .docx, .pdf)')
      }
    }
  }

  const validateFileType = (file) => {
    const allowedTypes = ['.txt', '.doc', '.docx', '.pdf']
    const fileName = file.name.toLowerCase()
    return allowedTypes.some(type => fileName.endsWith(type))
  }

  const readFileAsText = (file) => {
    return new Promise((resolve, reject) => {
      const reader = new FileReader()
      reader.onload = (e) => resolve(e.target.result)
      reader.onerror = (e) => reject(e)
      reader.readAsText(file)
    })
  }

  const handleFileChange = (e) => {
    const selectedFile = e.target.files[0]
    if (selectedFile && validateFileType(selectedFile)) {
      setFile(selectedFile)
      setError('')
      setResult(null)
    } else {
      setError('Please select a valid file type (.txt, .doc, .docx, .pdf)')
    }
  }

  const handleTextChange = (e) => {
    setText(e.target.value)
    setError('')
    setResult(null)
  }

  const simulateProgress = () => {
    setUploadProgress(0)
    const interval = setInterval(() => {
      setUploadProgress(prev => {
        if (prev >= 90) {
          clearInterval(interval)
          return 90
        }
        return prev + Math.random() * 15
      })
    }, 200)
    return interval
  }

  const handleSubmit = async (e) => {
    e.preventDefault()
    if (!sessionToken) {
      setError('No session available. Please refresh the page.')
      return
    }
    if (uploadMode === 'text' && !text.trim()) {
      setError('Please enter some text')
      return
    }
    if (uploadMode === 'file' && !file) {
      setError('Please select a file')
      return
    }
    setLoading(true)
    setError('')
    setRagResult(null)
    const progressInterval = simulateProgress()
    let currentToken = sessionToken
    try {
      let textContent = text
      if (uploadMode === 'file') {
        textContent = await readFileAsText(file)
      }
      let response = await uploadDocument({
        full_text: textContent,
        document_id: uploadMode === 'file' ? `file_${file.name}_${Date.now()}` : `text_${Date.now()}`,
        chunk_size: 800,
        overlap: 100
      }, currentToken)
      clearInterval(progressInterval)
      setUploadProgress(100)
      setTimeout(() => {
        setResult(response)
        setText('')
        setFile(null)
        setUploadProgress(0)
      }, 500)
    } catch (err) {
      if (err.message.includes('401') || err.message.includes('expired')) {
        try {
          currentToken = await refreshSession()
          let textContent = text
          if (uploadMode === 'file') {
            textContent = await readFileAsText(file)
          }
          const response = await uploadDocument({
            full_text: textContent,
            document_id: uploadMode === 'file' ? `file_${file.name}_${Date.now()}` : `text_${Date.now()}`,
            chunk_size: 800,
            overlap: 100
          }, currentToken)
          clearInterval(progressInterval)
          setUploadProgress(100)
          setTimeout(() => {
            setResult(response)
            setText('')
            setFile(null)
            setUploadProgress(0)
          }, 500)
        } catch (refreshErr) {
          clearInterval(progressInterval)
          setUploadProgress(0)
          setError('Session expired and failed to refresh. Please reload the page.')
        }
      } else {
        clearInterval(progressInterval)
        setUploadProgress(0)
        setError(err.message || 'Failed to upload document')
      }
    } finally {
      setTimeout(() => {
        setLoading(false)
      }, 500)
    }
  }

  const handleRagAnalysis = async () => {
    if (!sessionToken) {
      setRagError('No session available. Please refresh the page.')
      return
    }
    if (!result || !result.document_id) {
      setRagError('No document uploaded to analyze. Please upload a document first.')
      return
    }
    setRagLoading(true)
    setRagError('')
    setRagResult(null)
    let currentToken = sessionToken
    try {
      const res = await fetch('/api/v1/analysis/rag_analysis', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${currentToken}`
        },
        body: JSON.stringify({
          document_id: result.document_id,
          analysis_type: analysisType,
          jurisdiction: 'US'
        })
      })
      if (!res.ok) {
        const errorData = await res.json()
        if (res.status === 401) {
          currentToken = await refreshSession()
          const retryRes = await fetch('/api/v1/analysis/rag_analysis', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
              'Authorization': `Bearer ${currentToken}`
            },
            body: JSON.stringify({
              document_id: result.document_id,
              analysis_type: analysisType,
              jurisdiction: 'US'
            })
          })
          if (!retryRes.ok) {
            const retryErrorData = await retryRes.json()
            throw new Error(retryErrorData.detail || 'Failed to fetch RAG analysis after token refresh')
          }
          const data = await retryRes.json()
          setRagResult(data)
        } else {
          throw new Error(errorData.detail || 'Failed to fetch RAG analysis')
        }
      } else {
        const data = await res.json()
        setRagResult(data)
      }
    } catch (e) {
      setRagError(e.message || 'Error performing RAG analysis')
    } finally {
      setRagLoading(false)
    }
  }

  const formatFileSize = (bytes) => {
    if (bytes === 0) return '0 Bytes'
    const k = 1024
    const sizes = ['Bytes', 'KB', 'MB', 'GB']
    const i = Math.floor(Math.log(bytes) / Math.log(k))
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i]
  }

  const renderAnalysisResult = () => {
    if (!ragResult) return null
    const { analysis, relevant_chunks, status, timestamp } = ragResult

    return (
      <div className="analysis-result-container">
        <div className="analysis-header">
          <div className="status-indicator">
            <div className="status-dot success"></div>
            <h3>Analysis Complete</h3>
          </div>
          <div className="analysis-metadata">
            <span className="metadata-item">
              <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
                <circle cx="12" cy="12" r="10"/>
                <polyline points="12,6 12,12 16,14"/>
              </svg>
              {new Date(timestamp).toLocaleString()}
            </span>
            <span className="metadata-item">
              <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
                <path d="M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"/>
                <polyline points="14,2 14,8 20,8"/>
                <line x1="16" y1="13" x2="8" y2="13"/>
                <line x1="16" y1="17" x2="8" y2="17"/>
                <polyline points="10,9 9,9 8,9"/>
              </svg>
              {relevant_chunks?.length || 0} chunks analyzed
            </span>
          </div>
        </div>

        {analysis && (
          <div className="analysis-content">
            <h4>Analysis Results</h4>
            <div className="json-viewer">
              <pre>{JSON.stringify(analysis, null, 2)}</pre>
            </div>
          </div>
        )}

        {relevant_chunks?.length > 0 && (
          <div className="relevant-chunks">
            <h4>Document Sections Analyzed</h4>
            <div className="chunks-grid">
              {relevant_chunks.map((chunk, idx) => (
                <div key={idx} className="chunk-card">
                  <div className="chunk-header">
                    <span className="chunk-label">Section {chunk.chunk_index}</span>
                    <span className="relevance-score">
                      {(chunk.relevance_score * 100).toFixed(1)}% relevance
                    </span>
                  </div>
                  <p className="chunk-content">{chunk.text}</p>
                </div>
              ))}
            </div>
          </div>
        )}
      </div>
    )
  }

  return (
    <div className="home-page">
      <div className="background-layers">
        <div className="gradient-layer"></div>
        <div className="pattern-layer"></div>
        <div className="floating-orbs">
          <div className="orb orb-1"></div>
          <div className="orb orb-2"></div>
          <div className="orb orb-3"></div>
        </div>
      </div>

      <div className="content-wrapper">
        <header className="page-header">
          <div className="header-content">
            <div className="title-section">
              <div className="title-icon">
                <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
                  <path d="M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"/>
                  <polyline points="14,2 14,8 20,8"/>
                  <line x1="16" y1="13" x2="8" y2="13"/>
                  <line x1="16" y1="17" x2="8" y2="17"/>
                  <polyline points="10,9 9,9 8,9"/>
                </svg>
              </div>
              <h1 className="page-title">AI Legal Insights</h1>
            </div>
            <p className="page-subtitle">
              Transform your legal documents with AI-powered risk analysis, negotiation strategies, and comprehensive summaries
            </p>
          </div>
        </header>

        <div className="upload-interface">
          <div className="interface-container">
            <div className="mode-selector">
              <div className="selector-track">
                <div className={`selector-thumb ${uploadMode === 'file' ? 'file-mode' : ''}`}></div>
              </div>
              <button
                className={`mode-button ${uploadMode === 'text' ? 'active' : ''}`}
                onClick={() => {
                  setUploadMode('text')
                  setFile(null)
                  setResult(null)
                  setError('')
                }}
              >
                <div className="button-icon">
                  <svg width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
                    <path d="M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"/>
                    <polyline points="14,2 14,8 20,8"/>
                    <line x1="16" y1="13" x2="8" y2="13"/>
                    <line x1="16" y1="17" x2="8" y2="17"/>
                    <polyline points="10,9 9,9 8,9"/>
                  </svg>
                </div>
                Text Input
              </button>
              <button
                className={`mode-button ${uploadMode === 'file' ? 'active' : ''}`}
                onClick={() => {
                  setUploadMode('file')
                  setText('')
                  setResult(null)
                  setError('')
                }}
              >
                <div className="button-icon">
                  <svg width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
                    <path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"/>
                    <polyline points="7,10 12,15 17,10"/>
                    <line x1="12" y1="15" x2="12" y2="3"/>
                  </svg>
                </div>
                File Upload
              </button>
            </div>

            <form className="upload-form" onSubmit={handleSubmit}>
              {uploadMode === 'text' ? (
                <div className="text-upload-section">
                  <div className="section-header">
                    <div className="section-icon">
                      <svg width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
                        <polyline points="9,11 12,14 22,4"/>
                        <path d="M21 12v7a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h11"/>
                      </svg>
                    </div>
                    <h3 className="section-title">Enter Legal Document</h3>
                  </div>
                  <div className="textarea-wrapper">
                    <textarea
                      className={`content-textarea ${text.trim() ? 'has-content' : ''}`}
                      placeholder="Paste your legal document text here..."
                      value={text}
                      onChange={handleTextChange}
                      rows={8}
                      spellCheck="false"
                    />
                    <div className="textarea-footer">
                      <div className="character-counter">
                        {text.length.toLocaleString()} characters
                      </div>
                    </div>
                  </div>
                </div>
              ) : (
                <div className="file-upload-section">
                  <div className="section-header">
                    <div className="section-icon">
                      <svg width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
                        <path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"/>
                        <polyline points="7,10 12,15 17,10"/>
                        <line x1="12" y1="15" x2="12" y2="3"/>
                      </svg>
                    </div>
                    <h3 className="section-title">Upload Document</h3>
                  </div>
                  <div
                    ref={dropZoneRef}
                    className={`upload-dropzone ${dragActive ? 'drag-over' : ''} ${file ? 'has-file' : ''}`}
                    onDragEnter={handleDrag}
                    onDragLeave={handleDrag}
                    onDragOver={handleDrag}
                    onDrop={handleDrop}
                    onClick={() => fileInputRef.current?.click()}
                  >
                    <input
                      ref={fileInputRef}
                      type="file"
                      className="file-input-hidden"
                      onChange={handleFileChange}
                      accept=".txt,.doc,.docx,.pdf"
                    />
                    {file ? (
                      <div className="file-preview">
                        <div className="file-icon-wrapper">
                          <div className="file-type-icon">
                            <svg width="32" height="32" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
                              <path d="M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"/>
                              <polyline points="14,2 14,8 20,8"/>
                              <line x1="16" y1="13" x2="8" y2="13"/>
                              <line x1="16" y1="17" x2="8" y2="17"/>
                              <polyline points="10,9 9,9 8,9"/>
                            </svg>
                          </div>
                        </div>
                        <div className="file-info">
                          <div className="file-name">{file.name}</div>
                          <div className="file-meta">
                            <span className="file-size">{formatFileSize(file.size)}</span>
                            <span className="file-status">Ready to upload</span>
                          </div>
                        </div>
                        <button
                          type="button"
                          className="remove-file-btn"
                          onClick={(e) => {
                            e.stopPropagation()
                            setFile(null)
                          }}
                        >
                          <svg width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
                            <line x1="18" y1="6" x2="6" y2="18"/>
                            <line x1="6" y1="6" x2="18" y2="18"/>
                          </svg>
                        </button>
                      </div>
                    ) : (
                      <div className="dropzone-content">
                        <div className="upload-graphic">
                          <div className="upload-icon-container">
                            <svg width="36" height="36" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
                              <path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"/>
                              <polyline points="7,10 12,15 17,10"/>
                              <line x1="12" y1="15" x2="12" y2="3"/>
                            </svg>
                          </div>
                        </div>
                        <div className="upload-text">
                          <div className="primary-text">Drag & drop your document here</div>
                          <div className="secondary-text">or click to browse files</div>
                        </div>
                        <div className="supported-formats">
                          <div className="format-label">Supported formats:</div>
                          <div className="format-list">
                            <span className="format-item">.txt</span>
                            <span className="format-item">.doc</span>
                            <span className="format-item">.docx</span>
                            <span className="format-item">.pdf</span>
                          </div>
                        </div>
                      </div>
                    )}
                  </div>
                </div>
              )}

              <button
                type="submit"
                className="submit-button"
                disabled={loading || (!text.trim() && !file)}
              >
                <div className="button-content">
                  {loading ? (
                    <>
                      <div className="loading-spinner"></div>
                      Uploading {uploadProgress > 0 && `${Math.round(uploadProgress)}%`}
                    </>
                  ) : (
                    <>
                      <div className="button-icon">
                        <svg width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
                          <path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"/>
                          <polyline points="7,10 12,15 17,10"/>
                          <line x1="12" y1="15" x2="12" y2="3"/>
                        </svg>
                      </div>
                      Upload & Process Document
                    </>
                  )}
                </div>
                <div className="button-glow"></div>
              </button>

              {loading && uploadProgress > 0 && (
                <div className="progress-section">
                  <div className="progress-bar">
                    <div
                      className="progress-fill"
                      style={{ width: `${uploadProgress}%` }}
                    >
                      <div className="progress-shine"></div>
                    </div>
                  </div>
                  <div className="progress-info">
                    <span className="progress-label">Processing document...</span>
                    <span className="progress-percentage">{Math.round(uploadProgress)}%</span>
                  </div>
                </div>
              )}

              {error && (
                <div className="notification error-notification">
                  <div className="notification-icon">
                    <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
                      <circle cx="12" cy="12" r="10"/>
                      <line x1="15" y1="9" x2="9" y2="15"/>
                      <line x1="9" y1="9" x2="15" y2="15"/>
                    </svg>
                  </div>
                  <div className="notification-content">
                    <div className="notification-title">Upload Error</div>
                    <div className="notification-message">{error}</div>
                  </div>
                </div>
              )}
            </form>
          </div>
        </div>

        {result && result.document_id && (
          <div className="upload-interface">
            <div className="interface-container">
              <div className="notification success-notification">
                <div className="notification-icon">
                  <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
                    <polyline points="9,11 12,14 22,4"/>
                    <path d="M21 12v7a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h11"/>
                  </svg>
                </div>
                <div className="notification-content">
                  <div className="notification-title">Upload Successful!</div>
                  <div className="notification-message">Your document has been processed and is ready for analysis.</div>
                  <div className="result-grid">
                    <div className="result-item">
                      <span className="result-label">Document ID</span>
                      <span className="result-value">{result.document_id}</span>
                    </div>
                    <div className="result-item">
                      <span className="result-label">Chunks Stored</span>
                      <span className="result-value">{result.chunks_stored}</span>
                    </div>
                    <div className="result-item">
                      <span className="result-label">Status</span>
                      <span className="result-value status-success">{result.status}</span>
                    </div>
                    <div className="result-item">
                      <span className="result-label">Timestamp</span>
                      <span className="result-value">{new Date(result.timestamp).toLocaleString()}</span>
                    </div>
                  </div>
                </div>
              </div>

              <div className="analysis-section">
                <div className="section-header">
                  <div className="section-icon">
                    <svg width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
                      <circle cx="12" cy="12" r="3"/>
                      <path d="M12 1v6m0 6v6"/>
                      <path d="M1 12h6m6 0h6"/>
                      <path d="M20.49 9l-1.5 1.5M5 12l-1.5 1.5"/>
                      <path d="M20.49 15l-1.5-1.5M5 12l-1.5-1.5"/>
                    </svg>
                  </div>
                  <h3 className="section-title">AI Analysis</h3>
                </div>
                <p style={{ color: 'var(--text-secondary)', marginBottom: '1.5rem', textAlign: 'center' }}>
                  Choose an analysis type and get AI-powered insights about your legal document.
                </p>

                <div className="analysis-controls">
                  <div className="analysis-type-group">
                    <label htmlFor="analysis-type">Analysis Type</label>
                    <select
                      id="analysis-type"
                      value={analysisType}
                      onChange={(e) => setAnalysisType(e.target.value)}
                      disabled={ragLoading}
                      className="analysis-select"
                    >
                      <option value="risk_analysis">🚨 Risk Analysis - Identify potential legal risks</option>
                      <option value="negotiation">🤝 Negotiation Strategy - Get negotiation recommendations</option>
                      <option value="summary">📋 Document Summary - Comprehensive overview</option>
                    </select>
                  </div>

                  <button
                    className="submit-button"
                    onClick={handleRagAnalysis}
                    disabled={ragLoading}
                    style={{ marginBottom: 0 }}
                  >
                    <div className="button-content">
                      {ragLoading ? (
                        <>
                          <div className="loading-spinner"></div>
                          Analyzing...
                        </>
                      ) : (
                        <>
                          <div className="button-icon">
                            <svg width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
                              <circle cx="12" cy="12" r="3"/>
                              <path d="M12 1v6m0 6v6"/>
                              <path d="M1 12h6m6 0h6"/>
                            </svg>
                          </div>
                          Run AI Analysis
                        </>
                      )}
                    </div>
                    <div className="button-glow"></div>
                  </button>
                </div>

                {ragError && (
                  <div className="notification error-notification">
                    <div className="notification-icon">
                      <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
                        <circle cx="12" cy="12" r="10"/>
                        <line x1="15" y1="9" x2="9" y2="15"/>
                        <line x1="9" y1="9" x2="15" y2="15"/>
                      </svg>
                    </div>
                    <div className="notification-content">
                      <div className="notification-title">Analysis Error</div>
                      <div className="notification-message">{ragError}</div>
                    </div>
                  </div>
                )}

                {renderAnalysisResult()}
              </div>
            </div>
          </div>
        )}
      </div>

      <div className="status-footer">
        <div className="session-indicator">
          <div className={`status-dot ${sessionToken ? 'active' : ''}`}></div>
          <span className="status-label">
            {sessionToken ? 'Session Active' : 'Session Inactive'}
          </span>
        </div>
        <div className="security-badge">
          <div className="security-icon">
            <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
              <path d="M12 22s8-4 8-10V5l-8-3-8 3v7c0 6 8 10 8 10z"/>
            </svg>
          </div>
          <span>Secure Processing</span>
        </div>
      </div>
    </div>
  )
}

export default Home
